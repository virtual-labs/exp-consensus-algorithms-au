/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.13 public/textures/character2.glb 
*/

import React, { memo, useCallback, useRef } from "react";
import { useGLTF, useAnimations } from "@react-three/drei";
import { useFrame } from "react-three-fiber";
import { useBox } from "@react-three/cannon";
import { useSelector } from "react-redux";

const Character = (props) => {
  const [position, setPosition] = React.useState([-10, -2, 2.6]);
  const [rotation, setRotation] = React.useState([0, 190, 0]);

  const group = useRef();
  const { nodes, materials, animations } = useGLTF("/textures/character2.glb");
  const { userIntract, ifClickLeft } = useSelector(
    (state) => state.BlockChainReducer
  );

  const { actions, names } = useAnimations(animations, group);

  React.useEffect(() => {
    actions[names[3]].reset().fadeIn(0.5).play();
  }, []);
  React.useEffect(() => {
    if (userIntract) {
      const newPosition = [position[0] + 1, position[1], position[2]];
      setPosition(newPosition);
      setRotation([0, 60, 0]);
    } else {
      const newPosition = [...position];
      setPosition(newPosition);
      setRotation([0, 190, 0]);
    }
  }, [userIntract]);
  console.log(position, rotation, "hh");
  useFrame(() => {
    const speed = 0.02;
    const newPosition = [...position];
    if (group.current) {
      group.current.position.set(...position);
      group.current.rotation.set(...rotation);
    }

    if (!ifClickLeft) {
      actions[names[1]].reset().fadeIn(0.5).play();
    }
    if (ifClickLeft) {
      newPosition[0] += speed;

      setPosition(newPosition);
      // setRotation(newRotation);
    }
  });
  return (
    <group>
      <group ref={group} {...props} dispose={null}>
        <group name="Scene">
          <group
            name="Armature"
            position={[0.21, 0, 0]}
            rotation={[Math.PI / 2, 0, 0]}
            scale={0.01}
          >
            <primitive object={nodes.mixamorig7Hips} />
            <skinnedMesh
              name="Ch33_Belt"
              geometry={nodes.Ch33_Belt.geometry}
              material={materials["Ch33_body.003"]}
              skeleton={nodes.Ch33_Belt.skeleton}
            />
            <skinnedMesh
              name="Ch33_Body"
              geometry={nodes.Ch33_Body.geometry}
              material={materials["Ch33_body.003"]}
              skeleton={nodes.Ch33_Body.skeleton}
            />
            <skinnedMesh
              name="Ch33_Eyelashes"
              geometry={nodes.Ch33_Eyelashes.geometry}
              material={materials["Ch33_hair.003"]}
              skeleton={nodes.Ch33_Eyelashes.skeleton}
            />
            <skinnedMesh
              name="Ch33_Hair"
              geometry={nodes.Ch33_Hair.geometry}
              material={materials["Ch33_hair.003"]}
              skeleton={nodes.Ch33_Hair.skeleton}
            />
            <skinnedMesh
              name="Ch33_Pants"
              geometry={nodes.Ch33_Pants.geometry}
              material={materials["Ch33_body.003"]}
              skeleton={nodes.Ch33_Pants.skeleton}
            />
            <skinnedMesh
              name="Ch33_Shirt"
              geometry={nodes.Ch33_Shirt.geometry}
              material={materials["Ch33_body.003"]}
              skeleton={nodes.Ch33_Shirt.skeleton}
            />
            <skinnedMesh
              name="Ch33_Shoes"
              geometry={nodes.Ch33_Shoes.geometry}
              material={materials["Ch33_body.003"]}
              skeleton={nodes.Ch33_Shoes.skeleton}
            />
            <skinnedMesh
              name="Ch33_Suit"
              geometry={nodes.Ch33_Suit.geometry}
              material={materials["Ch33_body.003"]}
              skeleton={nodes.Ch33_Suit.skeleton}
            />
            <skinnedMesh
              name="Ch33_Tie"
              geometry={nodes.Ch33_Tie.geometry}
              material={materials["Ch33_body.003"]}
              skeleton={nodes.Ch33_Tie.skeleton}
            />
          </group>
        </group>
      </group>
    </group>
  );
};
export default memo(Character);
useGLTF.preload("/textures/character2.glb");
